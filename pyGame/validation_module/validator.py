#from preconditions_module.t7_pyhop_v1 import *
from pyhop_module.pyhop import *

class Validator:
    """This class is used to determine the validity of a plan with pyhop."""

    # Variables created that the user needs to define
    # initial_state and goal_state will follow the same structure for input and output
    # if a dictionary exists in initial state it should also exist in final state, however the contents may be different
    initial_state = {}
    goal_state = {}
    user_plan = None
    pyhop_plans = {}

    def __init__(self, initial_state, goal_state, user_plan):
        """Initializes Validator object with the provided values

        :param State initial_state: the initial state, on which the plan operates
        :param State goal_state: the state which is to be achieved
        :param Plan_Tree user_plan: user constructed plan that is to be validated
        """
        self.initial_state = initial_state
        self.goal_state = goal_state
        self.user_plan = user_plan
        self.pyhop_plan = ""

    def run_pyhop(self,node):
        """Produces and returns a plan using pyhop.
        Prior to calling the run_pyhop method, the Validator should have
        values assigned for initial_state (a State object), goal_state
        (a Goal object), and user_plan (a Plan_Tree object).

        :param Task_Node node: the last task in the user_plan that is to be included in the plan
        :return: The plan generated by pyhop
        """
        if self.user_plan is not None:
            plan = self.user_plan.get_plan(node)  #Build a plan consisting of tasks from the root to the specified node
            print(plan)                           #Display the plan to be validated
            pyhop_object = pyhop(self.initial_state, plan, verbose=0) #Validate
            self.pyhop_plan = pyhop_object                            #Save plan to local variable
            return pyhop_object                                       #Return the generated plan
        return "Fail"

    def get_tasks(self):
        """Returns a list of operators that can be used in a plan
        :return: A list of operators"""
        tasks = get_operators() #Get pyhops operators
        return tasks